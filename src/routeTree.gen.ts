/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactsRouteImport } from './routes/contacts'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DashboardRouteImport } from './routes/Dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/Dashboard/index'
import { Route as DashboardUserRouteImport } from './routes/Dashboard/user'
import { Route as DashboardReportsRouteImport } from './routes/Dashboard/reports'
import { Route as DashboardExpensesRouteImport } from './routes/Dashboard/expenses'
import { Route as DashboardCategoriesRouteImport } from './routes/Dashboard/categories'
import { Route as DashboardBudgetRouteImport } from './routes/Dashboard/budget'

const ContactsRoute = ContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/Dashboard',
  path: '/Dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUserRoute = DashboardUserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardReportsRoute = DashboardReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardExpensesRoute = DashboardExpensesRouteImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCategoriesRoute = DashboardCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardBudgetRoute = DashboardBudgetRouteImport.update({
  id: '/budget',
  path: '/budget',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Dashboard': typeof DashboardRouteWithChildren
  '/about': typeof AboutRoute
  '/contacts': typeof ContactsRoute
  '/Dashboard/budget': typeof DashboardBudgetRoute
  '/Dashboard/categories': typeof DashboardCategoriesRoute
  '/Dashboard/expenses': typeof DashboardExpensesRoute
  '/Dashboard/reports': typeof DashboardReportsRoute
  '/Dashboard/user': typeof DashboardUserRoute
  '/Dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contacts': typeof ContactsRoute
  '/Dashboard/budget': typeof DashboardBudgetRoute
  '/Dashboard/categories': typeof DashboardCategoriesRoute
  '/Dashboard/expenses': typeof DashboardExpensesRoute
  '/Dashboard/reports': typeof DashboardReportsRoute
  '/Dashboard/user': typeof DashboardUserRoute
  '/Dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Dashboard': typeof DashboardRouteWithChildren
  '/about': typeof AboutRoute
  '/contacts': typeof ContactsRoute
  '/Dashboard/budget': typeof DashboardBudgetRoute
  '/Dashboard/categories': typeof DashboardCategoriesRoute
  '/Dashboard/expenses': typeof DashboardExpensesRoute
  '/Dashboard/reports': typeof DashboardReportsRoute
  '/Dashboard/user': typeof DashboardUserRoute
  '/Dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Dashboard'
    | '/about'
    | '/contacts'
    | '/Dashboard/budget'
    | '/Dashboard/categories'
    | '/Dashboard/expenses'
    | '/Dashboard/reports'
    | '/Dashboard/user'
    | '/Dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contacts'
    | '/Dashboard/budget'
    | '/Dashboard/categories'
    | '/Dashboard/expenses'
    | '/Dashboard/reports'
    | '/Dashboard/user'
    | '/Dashboard'
  id:
    | '__root__'
    | '/'
    | '/Dashboard'
    | '/about'
    | '/contacts'
    | '/Dashboard/budget'
    | '/Dashboard/categories'
    | '/Dashboard/expenses'
    | '/Dashboard/reports'
    | '/Dashboard/user'
    | '/Dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AboutRoute: typeof AboutRoute
  ContactsRoute: typeof ContactsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Dashboard': {
      id: '/Dashboard'
      path: '/Dashboard'
      fullPath: '/Dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Dashboard/': {
      id: '/Dashboard/'
      path: '/'
      fullPath: '/Dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/Dashboard/user': {
      id: '/Dashboard/user'
      path: '/user'
      fullPath: '/Dashboard/user'
      preLoaderRoute: typeof DashboardUserRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/Dashboard/reports': {
      id: '/Dashboard/reports'
      path: '/reports'
      fullPath: '/Dashboard/reports'
      preLoaderRoute: typeof DashboardReportsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/Dashboard/expenses': {
      id: '/Dashboard/expenses'
      path: '/expenses'
      fullPath: '/Dashboard/expenses'
      preLoaderRoute: typeof DashboardExpensesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/Dashboard/categories': {
      id: '/Dashboard/categories'
      path: '/categories'
      fullPath: '/Dashboard/categories'
      preLoaderRoute: typeof DashboardCategoriesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/Dashboard/budget': {
      id: '/Dashboard/budget'
      path: '/budget'
      fullPath: '/Dashboard/budget'
      preLoaderRoute: typeof DashboardBudgetRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardBudgetRoute: typeof DashboardBudgetRoute
  DashboardCategoriesRoute: typeof DashboardCategoriesRoute
  DashboardExpensesRoute: typeof DashboardExpensesRoute
  DashboardReportsRoute: typeof DashboardReportsRoute
  DashboardUserRoute: typeof DashboardUserRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardBudgetRoute: DashboardBudgetRoute,
  DashboardCategoriesRoute: DashboardCategoriesRoute,
  DashboardExpensesRoute: DashboardExpensesRoute,
  DashboardReportsRoute: DashboardReportsRoute,
  DashboardUserRoute: DashboardUserRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AboutRoute: AboutRoute,
  ContactsRoute: ContactsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
